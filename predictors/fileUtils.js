const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const { formatDate } = require('./utils');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file d·ªØ li·ªáu
const DATA_DIR = path.join(__dirname, '../data');
const PREDICTIONS_FILE = path.join(DATA_DIR, 'predictions.json');
const PREDICTION_LOG_FILE = path.join(DATA_DIR, 'prediction_log.txt');

/**
 * Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c ho·∫∑c file n·∫øu ch√∫ng kh√¥ng t·ªìn t·∫°i
 */
function ensureDirectoryAndFilesExist() {
  // Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c data n·∫øu kh√¥ng t·ªìn t·∫°i
  if (!fs.existsSync(DATA_DIR)) {
    console.log(`üìÅ Th∆∞ m·ª•c data kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o th∆∞ m·ª•c: ${DATA_DIR}`);
    fs.mkdirSync(DATA_DIR, { recursive: true });
  }

  // Ki·ªÉm tra v√† t·∫°o file prediction_log.txt n·∫øu n√≥ kh√¥ng t·ªìn t·∫°i
  if (!fs.existsSync(PREDICTION_LOG_FILE)) {
    console.log(`üìÑ File prediction_log.txt kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o...`);
    fs.writeFileSync(PREDICTION_LOG_FILE, '', 'utf8');
  }

  // Ki·ªÉm tra v√† t·∫°o file predictions.json n·∫øu n√≥ kh√¥ng t·ªìn t·∫°i
  if (!fs.existsSync(PREDICTIONS_FILE)) {
    console.log(`üìÑ File predictions.json kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o...`);
    const defaultPrediction = {
      drawId: formatDate(new Date(), 'YYYYMMDD') + '0001',
      numbers: ['?', '?', '?', '?', '?'],
      detail: {
        index: 0,
        prediction: Math.floor(Math.random() * 10),
        reason: "D·ª± ƒëo√°n m·∫∑c ƒë·ªãnh khi t·∫°o file",
        strategy: "SimpleFollowTrend"
      },
      timestamp: new Date().toISOString()
    };
    fs.writeFileSync(PREDICTIONS_FILE, JSON.stringify(defaultPrediction, null, 2), 'utf8');
  }
}

/**
 * ƒê·ªçc d·ªØ li·ªáu d·ª± ƒëo√°n hi·ªán t·∫°i
 * @returns {Promise<Object>} D·ªØ li·ªáu d·ª± ƒëo√°n
 */
async function readPrediction() {
  try {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c v√† file t·ªìn t·∫°i
    ensureDirectoryAndFilesExist();
    
    const data = await fsPromises.readFile(PREDICTIONS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Kh√¥ng th·ªÉ ƒë·ªçc file d·ª± ƒëo√°n:', error.message);
    // Tr·∫£ v·ªÅ d·ª± ƒëo√°n m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng th·ªÉ ƒë·ªçc
    return {
      drawId: formatDate(new Date(), 'YYYYMMDD') + '0001',
      numbers: ['?', '?', '?', '?', '?'],
      detail: {
        index: 0,
        prediction: Math.floor(Math.random() * 10),
        reason: "D·ª± ƒëo√°n m·∫∑c ƒë·ªãnh do l·ªói ƒë·ªçc file",
        strategy: "SimpleFollowTrend"
      },
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * L∆∞u d·ªØ li·ªáu d·ª± ƒëo√°n
 * @param {Object} prediction - D·ªØ li·ªáu d·ª± ƒëo√°n
 * @returns {Promise<void>}
 */
async function savePrediction(prediction) {
  try {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c v√† file t·ªìn t·∫°i
    ensureDirectoryAndFilesExist();
    
    const data = JSON.stringify(prediction, null, 2);
    await fsPromises.writeFile(PREDICTIONS_FILE, data, 'utf8');
  } catch (error) {
    console.error('Kh√¥ng th·ªÉ l∆∞u file d·ª± ƒëo√°n:', error.message);
  }
}

/**
 * Ghi log d·ª± ƒëo√°n m·ªõi
 * @param {Object} predictionData - D·ªØ li·ªáu d·ª± ƒëo√°n hi·ªán t·∫°i
 * @param {Object} actualResult - K·∫øt qu·∫£ th·ª±c t·∫ø
 * @returns {Promise<void>}
 */
async function logPredictionResult(predictionData, actualResult) {
  try {
    if (!predictionData || !actualResult) return;

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c v√† file t·ªìn t·∫°i
    ensureDirectoryAndFilesExist();

    const prediction = predictionData.detail.prediction;
    const strategy = predictionData.detail.strategy;
    const position = predictionData.detail.index;
    
    const actualNumber = parseInt(actualResult.numbers[position]);
    const predictionNumber = parseInt(prediction);
    
    // X√°c ƒë·ªãnh T√†i/X·ªâu cho d·ª± ƒëo√°n v√† k·∫øt qu·∫£ th·ª±c t·∫ø
    const predictionType = predictionNumber >= 5 ? "Tai" : "Xiu";
    const actualType = actualNumber >= 5 ? "Tai" : "Xiu";
    
    // X√°c ƒë·ªãnh d·ª± ƒëo√°n ƒë√∫ng hay sai
    const isCorrect = (predictionNumber >= 5 && actualNumber >= 5) || 
                       (predictionNumber < 5 && actualNumber < 5);
    const resultText = isCorrect ? "Dung" : "Sai";
    
    // ƒê·ªãnh d·∫°ng th·ªùi gian
    const now = new Date();
    const timeStr = formatDate(now, "HH:mm:ss DD/MM/YYYY");
    
    // T·∫°o n·ªôi dung log
    const logContent = `[${timeStr}] - ${actualResult.drawId} - Du doan: ${predictionNumber} (${predictionType}) | So thuc te: ${actualNumber} (${actualType}) | [${resultText}] | Phuong phap: ${strategy} | Vi tri: ${position}\n`;
    
    // ƒê·ªçc n·ªôi dung file log hi·ªán t·∫°i
    let currentLog = '';
    try {
      currentLog = await fsPromises.readFile(PREDICTION_LOG_FILE, 'utf8');
    } catch (error) {
      // N·∫øu file kh√¥ng t·ªìn t·∫°i, b·ªè qua l·ªói
    }
    
    // Th√™m log m·ªõi v√†o ƒë·∫ßu file
    const newLog = logContent + currentLog;
    
    // L∆∞u log
    await fsPromises.writeFile(PREDICTION_LOG_FILE, newLog, 'utf8');
    
  } catch (error) {
    console.error('Kh√¥ng th·ªÉ ghi log d·ª± ƒëo√°n:', error.message);
  }
}

module.exports = {
  readPrediction,
  savePrediction,
  logPredictionResult
}; 